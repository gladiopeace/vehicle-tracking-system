/* Specifications

Project             : Vehicle Tracking System
Company             : Simplifix Automation Pvt. Ltd.
Project URL         : http://code.google.com/p/vehicle-tracking-system/
Microcontroller	  : Atmel ATMEGA 16
Compiler            : WinAVR
Programmer     	  : SinaProg, AVRDude
IDE                 : Ecllipse for AVR
Hardware         	  : GPS Module SR-91 is used and External interrupt INT0 used. 
                      Check http://code.google.com/p/vehicle-tracking-system/w/list 
                      for details

Description: This program sends a message to the user and the user can track the vehicle by sending the message back. If the message is received, it will enable an interrupt in the Master controller to get the coordinates. Most of the code is self explanatory. Contact mudit.raaj.gupta@gmail.com for clarification and header files

@Author : Mudit Raj Gupta

*/


#include <avr/io.h>
#include <util/delay.h>
#include "lcd_lib.h"
#include <stdio.h>
#include <string.h>
#include "uart_lib.h"
#include <avr/interrupt.h>
#include <string.h>

	int i=0;
    int readMsg=0;
    int flag=0;
    char a[5];
    char d[90];
    char receivedMsg[90];
    char send[] = "AT+CMGS=\"+9193702597791\"";
    char read[] = "AT+CMGR=16";
    char num_Rx [10];
    char msg[] = "Send the original text to track";
    char coordinate[23];
    char vehicleID[13];
    char receive[] = "SM";
    char delete[]="AT+CMGD=16";


int main()
{
    int j=0;

    //setting up LCD
    DDRB=0xff;
    LCDinit();
    LCDclr();

    //setting SPI
    set_spi_prescalar(3);
   	set_spi_slave();
   	set_spi_lsbfirst();
   	set_spi_clkpolarity(1);
   	set_spi_clkphase(1);
   	DDRD=0xFF;
   	_delay_ms(10);

  	for(j=0;j<13;j++)
   		vehicleID[j]=sendchar_spi('*');

  	for(j=0;j<23;j++)
  	   		coordinate[j]=sendchar_spi('*');

   	set_uartbaud(9600);

    //Send first msg
   	sendstring_uart(send);
   	_delay_ms(10);
    sendstring_uart(msg);
    _delay_ms(10);
    sendchar_uart(0x1A);
    _delay_ms(10);
    sendchar_uart(0x1D);
        _delay_ms(10);

    sei();
    enable_uart_rxcint();

	while(1)
	{

    if(flag==1)
		{
    	cli();

    	//setup the interrupt
				PORTD&=~(1<<3);
    			_delay_ms(1);
    			PORTD|=(1<<3);
    			_delay_ms(1);

    	//spi receive
    			_delay_ms(10);
    			for(j=0;j<10;j++)
    		   		coordinate[j]=sendchar_spi('1');

    	//send coordinates
    			sendstring_uart(send);
    			    _delay_ms(10);
    			sendstring_uart(coordinate);
    			     _delay_ms(10);
    		    sendchar_uart(0x01);
    		          _delay_ms(10);
		sei();
		}
	}
}

    ISR(USART_RXC_vect)
    {

    	d[i]=UDR;
    	i++;
    	//If received
    	if(i==2)
    	{
    		if(strncmp(receive,d,2)==0)
    		{
    			sendstring_uart(read);
    		    _delay_ms(10);
    			sendchar_uart(0x01);
    			sendchar_uart(0x1A);
    			    _delay_ms(10);
    			i=0;
    			readMsg = 1;
    		}

    	}

    	if(readMsg==1&&i==90)
    	{
    	//Decode and compare

    	if(strncmp(receivedMsg,msg,90)==0)
    	{
    		flag=1;
    		readMsg=0;

    	}
    	}
    	if(i==30)
    	{
       		i=0;
       		sendstring_uart(delete);
       		sendchar_uart(0x01);
    	}

    }

